{"version":3,"sources":["assets/fabio-sasso-XjIajC-SYuc-unsplash.jpg","components/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","state","width","window","innerWidth","city","temperature","icon","pressure","humidity","wind","open","showWeather","URL","addEventListener","handleWindowSizeChange","fetch","then","response","json","data","setState","main","temp","weather","speed","backToWeather","handleChange","e","target","value","handleSubmit","preventDefault","removeEventListener","this","className","src","Background","alt","onClick","onSubmit","type","name","onChange","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,8D,6NCkK5BC,E,4MA9JXC,MAAQ,CACJC,MAAOC,OAAOC,WACdC,KAAM,GACNC,YAAa,GACbC,KAAM,GACNC,SAAU,GACVC,SAAU,GACVC,KAAM,GACNC,MAAM,G,EAGVC,YAAc,WAAO,IACVP,EAAQ,EAAKJ,MAAbI,KAKDQ,EAAG,UAHO,kDAGP,cAAmBR,EAAnB,kBAFK,SAEL,kBADM,oCAGfF,OAAOW,iBAAiB,SAAU,EAAKC,wBACvCC,MAAMH,GACLI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CACZf,YAAac,EAAKE,KAAKC,KACvBhB,KAAMa,EAAKI,QAAQ,GAAGjB,KACtBC,SAAUY,EAAKE,KAAKd,SACpBC,SAAUW,EAAKE,KAAKb,SACpBC,KAAMU,EAAKV,KAAKe,MAChBd,MAAM,Q,EASdI,uBAAyB,WACrB,EAAKM,SAAS,CAAEnB,MAAOC,OAAOC,c,EAGlCsB,cAAgB,WACZ,EAAKL,SAAS,CACVV,MAAM,EACNN,KAAM,M,EAIdsB,aAAe,SAACC,GACZ,EAAKP,SAAS,CACVhB,KAAMuB,EAAEC,OAAOC,S,EAIvBC,aAAe,SAACH,GACZA,EAAEI,kB,qEArBF7B,OAAO8B,oBAAoB,SAAUC,KAAKnB,0B,+BAwBrC,IAAD,EACuEmB,KAAKjC,MAAxEC,EADJ,EACIA,MAAOS,EADX,EACWA,KAAMN,EADjB,EACiBA,KAAMC,EADvB,EACuBA,YAAaC,EADpC,EACoCA,KAAMC,EAD1C,EAC0CA,SAAUC,EADpD,EACoDA,SAAUC,EAD9D,EAC8DA,KAGlE,OAFiBR,GAAS,IAIlB,yBAAKiC,UAAU,eACX,yBAAKA,UAAU,oBAAoBC,IAAOC,IAAYC,IAAM,eAC/D3B,EAAQ,yBAAKwB,UAAY,uBACd,uBAAGA,UAAU,2BAA2B9B,GACxC,yBAAK8B,UAAU,4BACX,yBAAKA,UAAU,2BACX,uBAAGA,UAAU,gCAAb,eACA,yBAAKA,UAAU,QACX,8BAAO7B,EAAP,UACA,yBAAK6B,UAAY,2BAA2BC,IAAG,2CAAsC7B,EAAtC,WAAqD+B,IAAM,mBAGlH,yBAAKH,UAAY,2BACb,uCACC3B,EAFL,SAKJ,yBAAK2B,UAAY,4BACb,yBAAKA,UAAY,2BACb,uCACC1B,EAFL,MAIA,yBAAK0B,UAAY,2BACb,mCACCzB,EAFL,UAKJ,4BAAQyB,UAAY,qBAAqBI,QAAWL,KAAKR,eAAzD,cAGV,oCACE,0BAAMS,UAAY,mBAAoBK,SAAUN,KAAKH,cACjD,sDAEI,6BACA,2BAAOU,KAAK,OAAOX,MAASzB,EAAMqC,KAAO,OACzCC,SAAUT,KAAKP,iBAGvB,4BAAQQ,UAAY,qBAAqBI,QAAWL,KAAKtB,aAAzD,UAMJ,yBAAKuB,UAAU,QACX,yBAAKA,UAAU,aAAaC,IAAOC,IAAYC,IAAM,eACpD3B,EACD,yBAAKwB,UAAY,gBACb,uBAAGA,UAAU,oBAAoB9B,GACjC,yBAAK8B,UAAU,qBACX,yBAAKA,UAAU,oBACX,uBAAGA,UAAU,yBAAb,eACA,yBAAKA,UAAU,QACX,8BAAO7B,EAAP,UACA,yBAAK6B,UAAY,oBAAoBC,IAAG,2CAAsC7B,EAAtC,WAAqD+B,IAAM,mBAG3G,yBAAKH,UAAY,oBACb,uCACC3B,EAFL,SAKJ,yBAAK2B,UAAY,qBACb,yBAAKA,UAAY,oBACb,uCACC1B,EAFL,MAIA,yBAAK0B,UAAY,oBACb,mCACCzB,EAFL,UAKJ,4BAAQyB,UAAY,wBAAwBI,QAAWL,KAAKR,eAA5D,cAGJ,oCACI,0BAAMS,UAAY,YAAaK,SAAUN,KAAKH,cAC1C,sDAEI,6BACA,2BAAOU,KAAK,OAAOX,MAASzB,EAAMqC,KAAO,OACzCC,SAAUT,KAAKP,iBAGvB,4BAAQQ,UAAY,cAAcI,QAAWL,KAAKtB,aAAlD,c,GAvJLgC,a,YCUJC,MARf,WACE,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,QCIcW,QACW,cAA7B3C,OAAO4C,SAASC,UAEe,UAA7B7C,OAAO4C,SAASC,UAEhB7C,OAAO4C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.71a9908b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fabio-sasso-XjIajC-SYuc-unsplash.432929e8.jpg\";","import React, { Component } from \"react\";\nimport Background from '../assets/fabio-sasso-XjIajC-SYuc-unsplash.jpg';\n\nclass Home extends Component {\n    state = {\n        width: window.innerWidth,\n        city: '',\n        temperature: '',\n        icon: '',\n        pressure: '',\n        humidity: '',\n        wind: '',\n        open: false\n    };\n\n    showWeather = () => {\n        const {city} = this.state\n\n        const API_URL = 'https://api.openweathermap.org/data/2.5/weather';\n        const UNITS = 'metric'\n        const APP_ID = 'b945797c58d365f04b977e8b2475fe8a'\n        const URL = `${API_URL}?q=${city}&units=${UNITS}&appid=${APP_ID}`;\n\n        window.addEventListener('resize', this.handleWindowSizeChange);\n        fetch(URL)\n        .then(response => response.json())\n        .then(data => {\n          this.setState({\n            temperature: data.main.temp,\n            icon: data.weather[0].icon,\n            pressure: data.main.pressure,\n            humidity: data.main.humidity,\n            wind: data.wind.speed,\n            open: true,\n          });\n        })\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleWindowSizeChange);\n    }\n\n    handleWindowSizeChange = () => {\n        this.setState({ width: window.innerWidth });\n    };\n\n    backToWeather = () => {\n        this.setState({ \n            open: false,\n            city: ''\n        });\n    };\n\n    handleChange = (e) => {\n        this.setState({\n            city: e.target.value,\n        });\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n    }\n\n    render(){\n        const { width, open, city, temperature, icon, pressure, humidity, wind } = this.state;\n        const isMobile = width <= 978;\n\n        if(isMobile){\n            return(\n                <div className=\"home-mobile\">\n                    <img className=\"background-mobile\" src = {Background} alt = \"background\" />\n                {open ?  <div className = \"home-weather-mobile\">\n                            <p className=\"home-weathe-city-mobile\">{city}</p>                           \n                            <div className=\"temp-and-pressure-mobile\">\n                                <div className=\"home-weather-box-mobile\">\n                                    <p className=\"home-weather-box-temp-mobile\">TEMPERATURE</p>\n                                    <div className=\"temp\">\n                                        <span>{temperature}&#8451;</span>\n                                        <img className = \"home-weather-icon-mobile\" src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt = \"weather-icon\"/>\n                                    </div>\n                                </div>\n                                <div className = \"home-weather-box-mobile\">\n                                    <p>PRESSURE</p>\n                                    {pressure} hPa\n                                </div>\n                            </div>\n                            <div className = \"himidity-and-wind-mobile\">\n                                <div className = \"home-weather-box-mobile\">\n                                    <p>HUMIDITY</p>\n                                    {humidity} %\n                                </div>\n                                <div className = \"home-weather-box-mobile\">\n                                    <p>WIND</p> \n                                    {wind} km/h\n                                </div>\n                            </div>\n                            <button className = \"weather-btn-mobile\" onClick = {this.backToWeather}>TRY AGAIN</button>\n                        </div>\n                        :  \n                  <>      \n                    <form className = \"home-form-mobile\"  onSubmit={this.handleSubmit} >\n                        <label>        \n                            enter the city name: \n                            <br/>\n                            <input type=\"text\" value = {city} name = \"text\"\n                            onChange={this.handleChange} />\n                        </label>\n                    </form>\n                    <button className = \"weather-btn-mobile\" onClick = {this.showWeather}>SHOW</button>\n                    </>}\n              </div>\n            )\n        }else{\n            return(\n                <div className=\"home\">\n                    <img className=\"background\" src = {Background} alt = \"background\" />\n                    {open ?\n                    <div className = \"home-weather\">\n                        <p className=\"home-weathe-city\">{city}</p>                           \n                        <div className=\"temp-and-pressure\">\n                            <div className=\"home-weather-box\">\n                                <p className=\"home-weather-box-temp\">TEMPERATURE</p>\n                                <div className=\"temp\">\n                                    <span>{temperature}&#8451;</span>\n                                    <img className = \"home-weather-icon\" src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt = \"weather-icon\"/>\n                                </div>\n                            </div>\n                            <div className = \"home-weather-box\">\n                                <p>PRESSURE</p>\n                                {pressure} hPa\n                            </div>\n                        </div>\n                        <div className = \"himidity-and-wind\">\n                            <div className = \"home-weather-box\">\n                                <p>HUMIDITY</p>\n                                {humidity} %\n                            </div>\n                            <div className = \"home-weather-box\">\n                                <p>WIND</p> \n                                {wind} km/h\n                            </div>\n                        </div>\n                        <button className = \"weather-btn-try-again\" onClick = {this.backToWeather}>TRY AGAIN</button>\n                    </div>\n                    :\n                    <>\n                        <form className = \"home-form\"  onSubmit={this.handleSubmit} >\n                            <label>        \n                                enter the city name: \n                                <br/>\n                                <input type=\"text\" value = {city} name = \"text\"\n                                onChange={this.handleChange} />\n                            </label>\n                        </form>\n                        <button className = \"weather-btn\" onClick = {this.showWeather}>SHOW</button>\n                    </>}\n              </div>\n            )\n        }\n    }\n}\n\nexport default Home;","import React from 'react';\nimport Home from '../src/components/Home.jsx'\nimport './App.css';\nimport \"../src/scss/main.scss\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}